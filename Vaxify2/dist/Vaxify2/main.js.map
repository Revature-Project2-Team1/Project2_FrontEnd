{"version":3,"sources":["./src/app/provider-dashboard/provider-dashboard.component.ts","./src/app/provider-dashboard/provider-dashboard.component.html","./src/app/patient-dashboard/patient-dashboard.component.ts","./src/app/patient-dashboard/patient-dashboard.component.html","./src/app/alert/alert.component.ts","./src/app/alert/alert.component.html","./src/app/login-provider/login-provider.component.ts","./src/app/login-provider/login-provider.component.html","./src/app/services/PatientService/patient.service.ts","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/environments/environment.ts","./src/app/services/PatientService/update-patient.service.ts","./src/app/services/login-service/login.service.ts","./src/app/qr-code-generator-reader/qr-code-generator-reader.component.ts","./src/app/qr-code-generator-reader/qr-code-generator-reader.component.html","./src/app/change-email/change-email.component.ts","./src/app/change-email/change-email.component.html","./src/app/services/AlertService/alert.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/models/alert.ts","./src/app/app.module.ts","./src/app/services/RegisterService/register.service.ts","./src/app/services/NavBarService/navbar.service.ts","./src/app/register-patient/register-patient.component.ts","./src/app/register-patient/register-patient.component.html","./src/app/Validators/Date.ts","./src/app/login-patient/login-patient.component.ts","./src/app/login-patient/login-patient.component.html","./src/app/Validators/no-whitespace.ts","./src/app/app-routing.module.ts","./src/app/update-patient/update-patient.component.ts","./src/app/update-patient/update-patient.component.html","./src/app/models/patient-creds.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-provider-dashboard',\n  templateUrl: './provider-dashboard.component.html',\n  styleUrls: ['./provider-dashboard.component.css']\n})\nexport class ProviderDashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>provider-dashboard works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-patient-dashboard',\n  templateUrl: './patient-dashboard.component.html',\n  styleUrls: ['./patient-dashboard.component.css']\n})\nexport class PatientDashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>patient-dashboard works!</p>\n","import { Component, OnInit,OnDestroy,Input } from '@angular/core';\r\nimport{Router, NavigationStart} from '@angular/router';\r\nimport{Subscription} from 'rxjs';\r\n\r\nimport{Alert, AlertType} from '../models/alert';\r\nimport{AlertService} from '../services/AlertService/alert.service';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-alert',\r\n  templateUrl: './alert.component.html',\r\n  styleUrls: ['./alert.component.css']\r\n})\r\n@Component({selector:'alert', templateUrl: 'alert.component.html'})\r\nexport class AlertComponent implements OnInit {\r\n  //Decorators\r\n  @Input() id = 'default-alert';\r\n  @Input() fade = true;\r\n\r\n  //Array of alerts to store\r\n  alerts:Alert[] =[];\r\n\r\n  alertSubscription:Subscription;\r\n  routeSubscription:Subscription;\r\n\r\n\r\n\r\n  constructor(private router: Router, private alertService: AlertService) {\r\n   }\r\n//subscribes to observable returned from the alertService. \r\n//Method with will call router.events.subscribe to subscribe to route changes\r\n// to clear alerts on route changes\r\n  ngOnInit(): void {\r\n    //Here is where we subscribe to new alert notifications\r\n    this.alertSubscription = this.alertService.onAlert(this.id)\r\n      .subscribe(alert =>{//will stream data to alert service\r\n        //if there is an empty alert clear it\r\n        if(!alert.message){\r\n          //filters out alerts wihtout the keepAfterRouteChange flag \r\n          this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\r\n        \r\n          //this will remove the keepAfterRouteChange on rest\r\n          this.alerts.forEach(x => delete x.keepAfterRouteChange);\r\n          return;\r\n        }\r\n        //add to alert array\r\n        this.alerts.push(alert);\r\n\r\n        //This will close the alert after a while\r\n        if(alert.autoClose){\r\n          setTimeout(()=> this.removeAlert(alert),3000);\r\n        }\r\n\r\n      });\r\n      \r\n  }\r\n  ngOnDestroy() {\r\n    // unsubscribe to avoid memory leaks\r\n    this.alertSubscription.unsubscribe();\r\n    this.routeSubscription.unsubscribe();\r\n  }\r\n\r\n  removeAlert(alert: Alert) {\r\n    // check if already removed to prevent error on auto close\r\n    if (!this.alerts.includes(alert)) return;\r\n\r\n    if (this.fade) {\r\n        // fade out alert\r\n      alert.fade = true;\r\n\r\n        // remove alert after faded out\r\n      setTimeout(() => {\r\n          this.alerts = this.alerts.filter(x => x !== alert);\r\n    }, 250);\r\n    }else {\r\n        // remove alert\r\n      this.alerts = this.alerts.filter(x => x !== alert);\r\n    }\r\n  }\r\n//CSS in  ts that uses the enum \r\ncssClass(alert: Alert) {\r\n  if (!alert) return;\r\n\r\n  const classes = ['alert', 'alert-dismissable', 'mt-4', 'container'];\r\n            \r\n  const alertTypeClass = {\r\n      [AlertType.Success]: 'alert alert-success',\r\n      [AlertType.Error]: 'alert alert-danger',\r\n      [AlertType.Info]: 'alert alert-info',\r\n      [AlertType.Warning]: 'alert alert-warning'\r\n  }\r\n\r\n  classes.push(alertTypeClass[alert.type]);\r\n\r\n  if (alert.fade) {\r\n      classes.push('fade');\r\n  }\r\n\r\n    return classes.join(' ');\r\n}\r\n\r\n}\r\n","<div *ngFor=\"let alert of alerts\" class=\"{{cssClass(alert)}}\">\r\n    <a class=\"close\" (click)=\"removeAlert(alert)\">&times;</a>\r\n    <span [innerHTML]=\"alert.message\"></span>\r\n</div>\r\n<!--Contains the html for displayer alert messages at the top of the page,\r\n    it renders a notification for each alert in alerts array of the alert component-->","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\nimport { ProviderCreds } from '../models/provider-creds';\r\nimport { AlertService } from '../services/AlertService/alert.service';\r\nimport { RegisterService } from '../services/RegisterService/register.service';\r\n\r\n@Component({\r\n  selector: 'app-login-provider',\r\n  templateUrl: './login-provider.component.html',\r\n  styleUrls: ['./login-provider.component.css']\r\n})\r\nexport class LoginProviderComponent implements OnInit {\r\n\r\n  user: ProviderCreds = {username: \"\", password: \"\"};\r\n  form: FormGroup;\r\n  submitted = false;\r\n  loading = false;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private registerService: RegisterService,\r\n    private alertService: AlertService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n  });\r\n  }\r\n\r\n  get f(){\r\n    return this.form.controls;\r\n  }\r\n  onSubmit() {\r\n    \r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"card \">\r\n    <div class=\"card-header\">\r\n      <img src='../../assets/project2.png' width=\"200\" height=\"200\">\r\n      <br>\r\n      <br>\r\n      Login as Provider\r\n    </div>\r\n    <div class=\"card-body\">\r\n      <h5 class=\"card-title\">Enter<br> Credentials:</h5>\r\n\r\n\r\n      <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" id=\"username\" [(ngModel)]=\"user.username\"\r\n            [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\"\r\n            style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"text\" placeholder=\"Username\"\r\n            formControlName=\"username\">\r\n          <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n          </div>\r\n        </div>\r\n        <br>\r\n        <br>\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" id=\"password\" [(ngModel)]=\"user.password\"\r\n            [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"\r\n            style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"password\" placeholder=\"Password\"\r\n            formControlName=\"password\">\r\n          <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n          </div>\r\n        </div>\r\n        <br>\r\n        <br>\r\n        <button [disabled]=\"loading\" class=\"btn btn-dark btn-outline-light\">\r\n          <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n          Login\r\n        </button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n<br>\r\n<br>\r\n<br>","\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Patient } from 'src/app/models/patient';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PatientService {\r\n  private urlQR: string;\r\n  constructor(private http: HttpClient) {\r\n    this.urlQR = \"http://localhost:9000/qr/find-patient/\"\r\n  }\r\n\r\n  public generateQR(patient_ssn):Observable<Patient> {\r\n\r\n    return this.http.get<any>(this.urlQR+patient_ssn);\r\n  }\r\n\r\n  public verifyQR(qr_id,patient_id):Observable<any> {\r\n\r\n    return this.http.get<any>(this.urlQR+patient_id +\"/\"+qr_id);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n\r\n","<div>\r\n<img src='../../assets/project2.1.png' class='rounded' width=\"500\" height=\"500\">\r\n</div>\r\n\r\n<div>\r\n<h1>Test Component Links</h1>\r\n\r\n<a routerLink=\"/qr-generator-reader\" class=\"nav-link\">QR Code Generator and Reader</a>\r\n<a routerLink=\"/patient-dashboard\" class=\"nav-link\">Patient Dashboard</a>\r\n<a routerLink=\"/provider-dashboard\" class=\"nav-link\">Provider Dashboard</a>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiUrl: 'http://localhost:9000'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.","import { Injectable } from '@angular/core';\r\n\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { environment } from '../../../environments/environment';\r\nimport { PatientCreds } from '../../models/patient-creds';\r\nimport { VaccineRecord } from 'src/app/models/vaccine-record';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UpdatePatientService {\r\n\r\n  constructor(private router: Router, private http: HttpClient) {}\r\n\r\n  update(vaccineRecords:VaccineRecord){\r\n    return this.http.put(`${environment.apiUrl}/provider/vaxRecords`, vaccineRecords)\r\n  }\r\n}\r\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/internal/operators/catchError';\r\nimport { retry } from 'rxjs/operators';\r\nimport { Patient } from 'src/app/models/patient';\r\nimport { PatientCreds } from 'src/app/models/patient-creds';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginServiceService {\r\n  private urllogin: string;\r\n  private urllogin1: string;\r\n  constructor(private http: HttpClient) {\r\n    this.urllogin = \"http://localhost:9000/patient/username-login/\"\r\n    this.urllogin1 =\"http://localhost:9000/patient/email-login/\"  \r\n}\r\npublic validatePatientCredsWithUsername(username,password):Observable<any>{\r\n  return this.http.get<any>(this.urllogin+username +\"/\"+password)/* .pipe(catchError(this.handleError)) */;\r\n}\r\n/* private handleError(httpError: HttpErrorResponse) {\r\n  if (httpError.error instanceof ErrorEvent) {\r\n    // A client-side or network error occurred. Handle it accordingly.\r\n    console.error('An error occurred:', httpError.error.message);\r\n  } else {\r\n    // The backend returned an unsuccessful response code.\r\n    // The response body may contain clues as to what went wrong.\r\n    console.log(httpError.error);\r\n  \r\n  }\r\n  // Return an observable with a user-facing error message.\r\n  return `${httpError.error}`;\r\n}  */\r\n\r\npublic validatePatientCredsWithEmail(email,password):Observable<any>{\r\n  return this.http.get<any>(this.urllogin1+email +\"/\"+password);;\r\n}\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { NgxQrcodeElementTypes, NgxQrcodeErrorCorrectionLevels } from '@techiediaries/ngx-qrcode';\r\nimport { Router } from '@angular/router';\r\nimport { Patient } from '../models/patient';\r\nimport { PatientService } from '../services/PatientService/patient.service';\r\nimport jsQR from \"jsqr\";\r\nimport QrcodeDecoder from 'qrcode-decoder';\r\n\r\n\r\n@Component({\r\n  selector: 'app-qr-code-generator-reader',\r\n  templateUrl: './qr-code-generator-reader.component.html',\r\n  styleUrls: ['./qr-code-generator-reader.component.css']\r\n})\r\nexport class QrCodeGeneratorReaderComponent implements OnInit {\r\n  elementType: NgxQrcodeElementTypes;\r\n  correctionLevel: NgxQrcodeErrorCorrectionLevels;\r\n  percent:number;\r\n  percent_e: number;\r\n  duration:number;\r\n  \r\n  value=\"\";\r\n  upload_value:string;\r\n  animation=true;\r\n  color=\"\"\r\n  status=false;\r\n  inboundClick=true;\r\n  s_mode=true;\r\n  \r\n  current_user=\"2\"; //ssn\r\n  scan_mode:string;\r\n  pic_name=\"pending_status\";\r\n  pic_name2=\"\";\r\n\r\n\r\n  pass:HTMLAudioElement= new Audio(\"../../assets/pass.mp3\");\r\n  fail:HTMLAudioElement=new Audio(\"../../assets/fail.mp3\");\r\n  click1:HTMLAudioElement= new Audio(\"../../assets/click1.mp3\");\r\n  click2:HTMLAudioElement= new Audio(\"../../assets/click2.mp3\");\r\n  \r\n  imageData:ImageData;\r\n  code:any;\r\n  reset= new Blob();\r\n  \r\n  reader = new FileReader();\r\n  pic= new Image();\r\n  qr= new QrcodeDecoder();\r\n\r\n  private patient: Patient;\r\n  patient_status: string;\r\n  val: string | ArrayBuffer;\r\n  constructor(private service: PatientService) { \r\n\r\n  }\r\n\r\n\r\n\r\n  verifyQR(): void{\r\n    \r\n\r\n  }\r\n\r\n  playPass(): void{\r\n    this.pass.load();\r\n    this.pass.volume=1;\r\n    this.pass.play();   \r\n    this.pic_name=\"verified_status\"\r\n    this.pic_name2=\"pass\"\r\n\r\n\r\n  }\r\n\r\n  playFail(): void{\r\n\r\n  this.fail.load();\r\n  this.fail.volume=1;\r\n  this.fail.play();   \r\n  this.pic_name=\"denied_status\"\r\n  this.pic_name2=\"fail\"\r\n\r\n\r\n  }\r\n  \r\n  uploadFile($event) { //also decodes QR\r\n    this.scan_mode=\"Scanned Value\"\r\n    this.reader.readAsDataURL($event.target.files[0]);\r\n    this.reader.onload = (_event) => {  \r\n      this.qr.decodeFromImage(this.reader.result)\r\n      .then(res=> {\r\n        console.log(res)\r\n        console.log(res.data)\r\n        this.upload_value=res.data\r\n        this.inboundClick = false; \r\n      this.s_mode=true;\r\n        if(this.upload_value==\"vaccinated\"|| this.upload_value==\"Fully Vaccinated\"){\r\n            \r\n\r\n            this.playPass();\r\n\r\n        }\r\n        else{\r\n          this.playFail();\r\n\r\n        }\r\n        this.reader.readAsText(this.reset);\r\n      });\r\n        \r\n    } \r\n\r\n}\r\n\r\n  generateQR(): void{\r\n    this.scan_mode=\"Self Value\";\r\n\r\n    this.elementType = NgxQrcodeElementTypes.URL;\r\n    this.correctionLevel = NgxQrcodeErrorCorrectionLevels.HIGH;\r\n\r\n    this.service.generateQR(this.current_user).subscribe(res => {\r\n      this.patient=res;\r\n      \r\n      this.patient_status=this.patient.status;\r\n      this.value=this.patient_status;\r\n      this.upload_value=this.patient_status;\r\n      this.inboundClick = false; \r\n      this.s_mode=false;\r\n      if(this.upload_value==\"vaccinated\"|| this.upload_value==\"Fully Vaccinated\"){\r\n        \r\n        this.pic_name=\"verified_status\"\r\n\r\n    }\r\n    else{\r\n      \r\n      this.pic_name=\"denied_status\"\r\n\r\n    }\r\n  })\r\n\r\n    this.click2.load();\r\n    this.click2.volume=1;\r\n    this.click2.play(); \r\n  }\r\n\r\n  ngOnInit(): void {\r\n \r\n    this.click1.load();\r\n    this.click1.volume=1;\r\n    this.click1.play(); \r\n  }\r\n  \r\n}\r\n\r\n\r\n","<div class=\"container\">\r\n  <div class=\"card \">\r\n    <div class=\"card-header\"><br>\r\n        <img [hidden]=\"!inboundClick\" src='../../assets/project2.1.png' width=\"250\" height=\"250\">\r\n        <ngx-qrcode *ngIf=\"!inboundClick && !s_mode\" [elementType]=\"elementType\" [errorCorrectionLevel]=\"correctionLevel\"\r\n          [value]=\"value\" cssClass=\"aclass\" [width]=\"250\"></ngx-qrcode>\r\n          <img *ngIf=\"!inboundClick && s_mode\" src='../../assets/{{pic_name2}}.png' width=\"250\" height=\"250\">\r\n\r\n        <textarea [hidden]=\"true\" id=\"x1\" [(ngModel)]=\"value\"></textarea>\r\n        \r\n\r\n        <input hidden type=\"file\" #uploader (change)=\"uploadFile($event)\"/>\r\n      </div>\r\n\r\n        <div class=\"card-body\">\r\n          <h5 class=\"card-title\">Generate your QR Code or Verify someone elses.</h5>\r\n          <small>Generated QR Codes Expire after 1 minute</small><br>\r\n          <div class=\"result1\">\r\n          <output class=\"bordered2\">{{scan_mode}}</output><br>\r\n          </div>\r\n          \r\n          <div class=\"result2\">\r\n          <output class=\"bordered\">{{upload_value}}</output><br>\r\n        </div>\r\n        \r\n\r\n          <div [hidden]=\"!inboundClick\" class=\"status_img\">\r\n          <img  src='../../assets/{{pic_name}}.png' width=\"50\" height=\"50\"><br>\r\n          </div>\r\n\r\n          <div [hidden]=\"inboundClick\">\r\n            <img  src='../../assets/{{pic_name}}.png' width=\"50\" height=\"50\"><br>\r\n            </div>\r\n\r\n          <form>\r\n            <button class=\"btn btn-dark btn-outline-light\" type=\"button\" (click)=\"generateQR()\">Generate QR\r\n              Code</button>\r\n            <br><br>\r\n            <button class=\"btn btn-dark btn-outline-light\" type=\"button\" (click)=\"uploader.click()\">Upload a QR to\r\n              Verify</button>\r\n            <br><br>\r\n          </form>\r\n          </div>\r\n  </div>\r\n\r\n\r\n          <br><br><br>\r\n        ","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\nimport { PatientCreds } from '../models/patient-creds';\r\nimport { AlertService } from '../services/AlertService/alert.service';\r\nimport { RegisterService } from '../services/RegisterService/register.service';\r\n\r\n@Component({\r\n  selector: 'app-change-email',\r\n  templateUrl: './change-email.component.html',\r\n  styleUrls: ['./change-email.component.css']\r\n})\r\nexport class ChangeEmailComponent implements OnInit {\r\n\r\n  user: PatientCreds;\r\n  form: FormGroup;\r\n  submitted = false;\r\n  loading = false;\r\n  \r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private registerService: RegisterService,\r\n    private alertService: AlertService\r\n    ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      SSN: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n  });\r\n  }\r\n\r\n  get f(){\r\n    return this.form.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    /* this.submitted = true;\r\n\r\n    // reset alerts on submit\r\n    this.alertService.clear();\r\n\r\n    // stop here if form is invalid\r\n    if (this.form.invalid) {\r\n        return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.registerService.register(this.form.value)\r\n        .pipe(first())\r\n        .subscribe({\r\n            next: () => {\r\n                this.alertService.success('Registration successful', { keepAfterRouteChange: true });\r\n                this.router.navigate(['../providerDashboard'], { relativeTo: this.route });\r\n            },\r\n            error: error => {\r\n                this.alertService.error(error);\r\n                this.loading = false;\r\n            }\r\n        }); */\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"card \">\r\n        <div class=\"card-header\">\r\n            <img src='../../assets/project2.png' width=\"200\" height=\"200\">\r\n            <br>\r\n            <br>\r\n            Login as Provider\r\n        </div>\r\n        <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Enter<br> Credentials:</h5>\r\n\r\n\r\n            <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"form-group\">\r\n                    <input class=\"form-control\" id=\"username\" [(ngModel)]=\"user.username\"\r\n                        [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\"\r\n                        style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"text\" placeholder=\"Username\"\r\n                        formControlName=\"username\">\r\n                    <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n                    </div>\r\n                </div>\r\n                <br>\r\n                <br>\r\n                <div class=\"form-group\">\r\n                    <input class=\"form-control\" id=\"SSN\" [(ngModel)]=\"user.SSN\"\r\n                        [ngClass]=\"{ 'is-invalid': submitted && f.SSN.errors }\"\r\n                        style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"text\" placeholder=\"SSN\"\r\n                        formControlName=\"SSN\">\r\n                    <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"f.SSN.errors.required\">SSN is required</div>\r\n                    </div>\r\n                </div>\r\n                <br>\r\n                <br>\r\n                <button [disabled]=\"loading\" class=\"btn btn-dark btn-outline-light\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                    Get Email\r\n                </button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n<br>\r\n<br>\r\n<br>","import { Injectable } from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';//Used to communicate with other components\r\n\r\nimport {filter} from 'rxjs/operators';\r\n\r\nimport{Alert, AlertType} from '../../models/alert';\r\n\r\n//This class will act as a bridge between any component \r\n//this will cause the alert component to display messages. \r\n//Below you will see methods for displaying, destorying, \r\n//and subscribing to alert messages\r\n\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AlertService {\r\n    private subject = new Subject<Alert>();\r\n    private defaultId = 'default-alert';\r\n\r\n    //used to subscribe to alerts observable\r\n    onAlert(id  = this.defaultId): Observable<Alert>{\r\n      return this.subject.asObservable().pipe(filter(x => x && x.id === id));\r\n    }\r\n\r\n    alert(alert: Alert) {\r\n      alert.id = alert.id || this.defaultId;\r\n      this.subject.next(alert);\r\n    }\r\n    clear(id = this.defaultId) {\r\n      this.subject.next(new Alert({ id }));\r\n    }\r\n\r\n    //Uses Alert Model classes enum and passes the message\r\n    success(message: string, options?: any) {\r\n      this.alert(new Alert({ ...options, type: AlertType.Success, message }));\r\n    }\r\n\r\n    error(message: string, options?: any) {\r\n      this.alert(new Alert({ ...options, type: AlertType.Error, message }));\r\n    }\r\n\r\n    info(message: string, options?: any) {\r\n        this.alert(new Alert({ ...options, type: AlertType.Info, message }));\r\n    }\r\n\r\n    warn(message: string, options?: any) {\r\n      this.alert(new Alert({ ...options, type: AlertType.Warning, message }));\r\n    }\r\n\r\n  constructor() { }\r\n}\r\n","import { OnInit } from '@angular/core';\r\nimport { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { LoginPatientComponent } from './login-patient/login-patient.component';\r\nimport { LoginProviderComponent } from './login-provider/login-provider.component';\r\nimport { RegisterPatientComponent } from './register-patient/register-patient.component';\r\nimport { NavbarService } from './services/NavBarService/navbar.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit{\r\n\r\n  title = 'Vaxify2';\r\n\r\n  links: Array<{ text: string, path: string }>;\r\n  isLoggedIn = false;\r\n\r\n  constructor(private router: Router, private navbarService: NavbarService) {\r\n    this.router.config.unshift(\r\n      { path: '/loginPatient', component: LoginPatientComponent },\r\n      { path: '/loginProvider', component: LoginProviderComponent },\r\n      { path: '/registerPatient', component: RegisterPatientComponent },\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.links = this.navbarService.getLinks();\r\n    //this.navbarService.getLoginStatus().subscribe(status => this.isLoggedIn = status);\r\n    \r\n  }\r\n\r\n  logout() {\r\n    this.navbarService.updateLoginStatus(false);\r\n    this.router.navigate(['home']);\r\n  }\r\n  \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  \r\n\r\n","\r\n<div class=\"container-desktop\" onload=\"checkAuth()\">\r\n  <nav class=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n    <div class=\"container-fluid\">\r\n      <a class=\"navbar-brand\" routerLink=\"/home\">Vaxify</a>\r\n\r\n      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\r\n        aria-controls=\"navbar-nav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n\r\n      <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul class=\"navbar-nav\">\r\n          <li class=\"nav-item\"><a routerLink=\"/loginPatient\" class=\"nav-link\">Patient Login</a></li>\r\n          <li class=\"nav-item\"><a routerLink=\"/loginProvider\" class=\"nav-link\">Provider Login</a></li>\r\n          <li class=\"nav-item\"><a routerLink=\"/registerPatient\" class=\"nav-link\">Register Patient</a></li>\r\n        </ul>\r\n\r\n        <ul class=\"nav navbar-nav\" routerLinkActive=\"active\">\r\n          <li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"/home\">Home</a></li>\r\n          <li class=\"nav-item\" *ngFor=\"let link of links\">\r\n            <a class=\"nav-link\" [routerLink]=\"link.path\">{{ link.text }}</a>\r\n          </li>\r\n          <li class=\"nav-item\" *ngIf=\"isLoggedIn\">\r\n            <a class=\"nav-link\" routerLink=\"/home\" (click)=\"logout()\">Logout</a>\r\n          </li>\r\n        </ul>\r\n\r\n      </div>\r\n\r\n\r\n      <img src='../../assets/project2.png' class='rounded' width=\"75\" height=\"75\">\r\n    </div>\r\n  </nav>\r\n\r\n\r\n    <div id=\"FunBar\">Need help finding a vaccine? Call 1-800-232-0233 (TTY 888-720-7489)</div>\r\n    <br>\r\n    <br>\r\n    <br>\r\n    <div>\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n\r\n","export class Alert {\r\n    id: string;\r\n    type: AlertType;\r\n    message: string;\r\n    autoClose: boolean;\r\n    keepAfterRouteChange: boolean;//Flag\r\n    fade: boolean;\r\n\r\n    constructor(init?:Partial<Alert>) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport enum AlertType {\r\n    Success,\r\n    Error,\r\n    Info,\r\n    Warning\r\n}","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LoginProviderComponent } from './login-provider/login-provider.component';\r\nimport { RegisterPatientComponent } from './register-patient/register-patient.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AlertComponent } from './alert/alert.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { QrCodeGeneratorReaderComponent } from './qr-code-generator-reader/qr-code-generator-reader.component';\r\n\r\n\r\n// Import ng-circle-progress\r\nimport { NgCircleProgressModule } from 'ng-circle-progress';\r\nimport { ProviderDashboardComponent } from './provider-dashboard/provider-dashboard.component';\r\nimport { PatientDashboardComponent } from './patient-dashboard/patient-dashboard.component';\r\nimport { UpdatePatientComponent } from './update-patient/update-patient.component';\r\n\r\n//import qr\r\nimport { NgxQRCodeModule } from '@techiediaries/ngx-qrcode';\r\nimport { LoginPatientComponent } from './login-patient/login-patient.component';\r\nimport { ChangeEmailComponent } from './change-email/change-email.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    LoginProviderComponent,\r\n    LoginPatientComponent,\r\n    RegisterPatientComponent,\r\n    AlertComponent,\r\n    QrCodeGeneratorReaderComponent,\r\n    ProviderDashboardComponent,\r\n    PatientDashboardComponent,\r\n    UpdatePatientComponent,\r\n    ChangeEmailComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule, \r\n    HttpClientModule,\r\n\r\n      FormsModule,\r\n      ReactiveFormsModule,\r\n    \r\n\r\n      // Specify ng-circle-progress as an import\r\n    NgCircleProgressModule.forRoot({\r\n      // set defaults here\r\n      radius: 100,\r\n      outerStrokeWidth: 16,\r\n      innerStrokeWidth: 8,\r\n      outerStrokeColor: \"#78C000\",\r\n      innerStrokeColor: \"#C7E596\",\r\n      animationDuration: 300,\r\n      \r\n    }),\r\n    NgxQRCodeModule\r\n    \r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }","import { Injectable } from '@angular/core';\r\n\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { environment } from '../../../environments/environment';\r\nimport { PatientCreds } from '../../models/patient-creds';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterService {\r\n\r\n  private urlRegister:String;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.urlRegister = \"http://localhost:9000/patient/register/\";\r\n   }\r\n\r\n   registerPatientCreds(email, username, password, ssn):Observable<any>{\r\n    return this.http.get<any>(this.urlRegister+email +\"/\"+username+\"/\"+password+\"/\"+ssn);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavbarService {\r\n\r\n  private links = new Array<{ text: string, path: string }>();\r\n  private isLoggedIn = new Subject();\r\n\r\n  constructor() {\r\n    this.addItem({ text: 'Login Patient', path: '/loginPatient' });\r\n    this.addItem({ text: 'Login Provider', path: '/loginProvider' });\r\n    this.addItem({ text: 'Login Provider', path: '/registerPatient' });\r\n    this.isLoggedIn.next(false);\r\n  }\r\n\r\n  getLinks() {\r\n    return this.links;\r\n  }\r\n\r\n  getLoginStatus() {\r\n    return this.isLoggedIn;\r\n  }\r\n\r\n  updateLoginStatus(status: boolean) {\r\n    this.isLoggedIn.next(status);\r\n\r\n    if (!status) {\r\n      this.clearAllItems();\r\n      this.addItem({ text: 'Login', path: 'login' });\r\n    }\r\n  }\r\n\r\n  updateNavAfterAuth(role: string): void {\r\n    this.removeItem({ text: 'Login' });\r\n\r\n    if (role === 'user') {\r\n      this.addItem({ text: 'User Board', path: 'user' });\r\n    } else if (role === 'admin') {\r\n      this.addItem({ text: 'Admin Board', path: 'admin' });\r\n    }\r\n  }\r\n\r\n  addItem({ text, path }) {\r\n    this.links.push({ text: text, path: path });\r\n  }\r\n\r\n  removeItem({ text }) {\r\n    this.links.forEach((link, index) => {\r\n      if (link.text === text) {\r\n        this.links.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  clearAllItems() {\r\n    this.links.length = 0;\r\n  }\r\n}","  \r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { FormBuilder, FormGroup, Validators, FormsModule, ReactiveFormsModule} from '@angular/forms';\r\n\r\n\r\nimport {RegisterService} from '../services/RegisterService/register.service';\r\nimport { AlertService } from '../services/AlertService/alert.service';\r\nimport { PatientCreds } from '../models/patient-creds';\r\nimport { NoWhiteSpaceValidator } from '../Validators/no-whitespace';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register-patient',\r\n  templateUrl: 'register-patient.component.html',\r\n  styleUrls: ['register-patient.component.css']\r\n})\r\nexport class RegisterPatientComponent implements OnInit {\r\n  myForm: FormGroup;\r\n  user: PatientCreds;\r\n  status:boolean;\r\n  inboudClick = false;\r\n\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private registerService: RegisterService,\r\n    private alertService: AlertService\r\n  ) {\r\n    this.user = new PatientCreds();\r\n\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.createForm();\r\n\r\n  }\r\n\r\n  createForm(){\r\n    this.myForm = this.fb.group({\r\n      usernameValidator:['', [Validators.required, NoWhiteSpaceValidator.cannotContainSpace]],\r\n      emailValidator:['',[ Validators.required, Validators.email,NoWhiteSpaceValidator.cannotContainSpace]],\r\n      ssnValidator:['', [Validators.required, Validators.pattern('^(?!666|000|9\\\\d{2})\\\\d{3}-(?!00)\\\\d{2}-(?!0{4})\\\\d{4}$'),NoWhiteSpaceValidator.cannotContainSpace]],\r\n      passwordValidator:['',[Validators.required, Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}'),NoWhiteSpaceValidator.cannotContainSpace]],\r\n     });\r\n  }\r\n  get f() { return this.myForm.controls; } //used to get form fields\r\n\r\n\r\n  onSubmit() {\r\n}\r\n\r\nregisterPatientCreds(){\r\n  this.inboudClick= true;\r\n  this.alertService.clear();\r\n\r\n  if (this.myForm.invalid) {\r\n      return;\r\n  }\r\n\r\n  this.registerService\r\n        .registerPatientCreds(this.user.email, this.user.username, this.user.password, this.user.SSN)\r\n        .subscribe((res) => {\r\n          this.status = res;\r\n          if (this.status == true) {\r\n            alert('Congrats you sucessfully registered');\r\n            this.router.navigate(['../loginPatient'], {\r\n              relativeTo: this.route,\r\n            });\r\n          }\r\n        },\r\n          (error) => {\r\n            alert(error.error);\r\n          }\r\n        );\r\n\r\n}\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"card \">\r\n    <div class=\"card-header\">\r\n      <img src='../../assets/project2.png' width=\"200\" height=\"200\">\r\n      <br>\r\n      <br>\r\n      Patient Register\r\n    </div>\r\n    <div class=\"card-body\">\r\n      <h5 class=\"card-title\">Enter<br> Credentials:</h5>\r\n\r\n      <form [formGroup]=\"myForm\" novalidate>\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" id=\"username\" [(ngModel)]=\"user.username\" name =\"username\" [ngClass]=\"{ 'is-invalid': inboudClick && f.usernameValidator.errors }\"\r\n          style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"text\" placeholder=\"Username\"\r\n          formControlName=\"usernameValidator\" >\r\n          <div *ngIf=\"inboudClick && f.usernameValidator.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.usernameValidator.errors.required\">Username is required</div>\r\n            <div *ngIf=\"f.usernameValidator.errors.cannotContainSpace\">No space</div>\r\n        </div>\r\n        </div>\r\n        <br>\r\n        <br>\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" id=\"email\" [(ngModel)]=\"user.email\" name =\"email\" [ngClass]=\"{ 'is-invalid': inboudClick && f.emailValidator.errors}\"\r\n          style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"text\" placeholder=\"Email\"\r\n          formControlName=\"emailValidator\">\r\n          <div *ngIf=\"inboudClick && f.emailValidator.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.emailValidator.errors.required\">Email is required</div>\r\n            <div *ngIf=\"f.emailValidator.errors.email\">Email format</div>\r\n            <div *ngIf=\"f.emailValidator.errors.cannotContainSpace\">No space</div>\r\n\r\n        </div>\r\n        </div>\r\n        <br>\r\n        <br>\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" id=\"ssn\" [(ngModel)]=\"user.SSN\" name =\"SSN\" [ngClass]=\"{ 'is-invalid': inboudClick && f.ssnValidator.errors}\"\r\n          style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"text\" placeholder=\"SSN (###-##-####)\"\r\n          formControlName=\"ssnValidator\">\r\n          <div *ngIf=\"inboudClick && f.ssnValidator.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.ssnValidator.errors.required\">SSN is required</div>\r\n            <div *ngIf=\"f.ssnValidator.errors.pattern\">SSN's format: ###-##-####</div>\r\n            <div *ngIf=\"f.ssnValidator.errors.cannotContainSpace\">No space</div>\r\n        </div>\r\n        </div>\r\n        <br>\r\n        <br>\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" id=\"password\" [(ngModel)]=\"user.password\" name =\"password\" [ngClass]=\"{ 'is-invalid': inboudClick && f.passwordValidator.errors}\"\r\n            style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"password\" placeholder=\"Password\" formControlName=\"passwordValidator\" >\r\n            <div *ngIf=\"inboudClick && f.passwordValidator.errors\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"f.passwordValidator.errors.required\">Password is required</div>\r\n              <div *ngIf=\"f.passwordValidator.errors.pattern\">Password contains at least 8 characters in length, lowercase adn upppercase letters, numbers, and special characters</div>\r\n              <div *ngIf=\"f.passwordValidator.errors.cannotContainSpace\">No space</div>\r\n\r\n          </div>\r\n        </div>\r\n        <br>\r\n        <br>\r\n        <button class=\"btn btn-dark btn-outline-light\" type=\"button\" (click)=\"registerPatientCreds()\">\r\n          <span class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n          Register\r\n        </button>\r\n\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n<br>\r\n<br>\r\n<br>","import { FormControl } from '@angular/forms';\r\n\r\nexport class DateValidator {\r\n\r\n   static ptDate(control: FormControl): { [key: string]: any } {\r\n       let ptDatePattern =  /^(((0[1-9]|[12]\\d|3[01])\\/(0[13578]|1[02])\\/((19|[2-9]\\d)\\d{2}))|((0[1-9]|[12]\\d|30)\\/(0[13456789]|1[012])\\/((19|[2-9]\\d)\\d{2}))|((0[1-9]|1\\d|2[0-8])\\/02\\/((19|[2-9]\\d)\\d{2}))|(29\\/02\\/((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$/g;\r\n\r\n       if (!control.value.match(ptDatePattern))\r\n           return { \"ptDate\": true };\r\n\r\n       return null;\r\n   }\r\n\r\n   static usDate(control: FormControl): { [key: string]: any } {\r\n       let usDatePattern = /^02\\/(?:[01]\\d|2\\d)\\/(?:19|20)(?:0[048]|[13579][26]|[2468][048])|(?:0[13578]|10|12)\\/(?:[0-2]\\d|3[01])\\/(?:19|20)\\d{2}|(?:0[469]|11)\\/(?:[0-2]\\d|30)\\/(?:19|20)\\d{2}|02\\/(?:[0-1]\\d|2[0-8])\\/(?:19|20)\\d{2}$/;\r\n\r\n       if (!control.value.match(usDatePattern))\r\n           return { \"usDate\": true };\r\n\r\n       return null;\r\n   }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PatientCreds } from '../models/patient-creds';\r\nimport { AlertService } from '../services/AlertService/alert.service';\r\nimport { NavbarService } from '../services/NavBarService/navbar.service';\r\nimport { LoginServiceService } from '../services/login-service/login.service';\r\nimport { NoWhiteSpaceValidator } from '../Validators/no-whitespace';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './login-patient.component.html',\r\n  styleUrls: ['./login-patient.component.css'],\r\n})\r\nexport class LoginPatientComponent implements OnInit {\r\n  user: PatientCreds;\r\n  user1: PatientCreds;\r\n  myForm:FormGroup;\r\n  inboudClick = false;\r\n\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private loginService: LoginServiceService,\r\n    private fb: FormBuilder,\r\n    private alertService: AlertService\r\n  ) {\r\n    this.user = new PatientCreds();\r\n    this.createForm();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n   \r\n  }\r\n  createForm(){\r\n    this.myForm = this.fb.group({\r\n      input:['', [Validators.required, NoWhiteSpaceValidator.cannotContainSpace]],\r\n      passwordValidator:['',[Validators.required,NoWhiteSpaceValidator.cannotContainSpace ]]\r\n     });\r\n  }\r\n\r\n  get f() { return this.myForm.controls; } //used to get form fields\r\n\r\n  validatePatientCreds(): void {\r\n    this.inboudClick = true;\r\n     this.alertService.clear();\r\n\r\n     if (this.myForm.invalid) {\r\n         return;\r\n     }\r\n    const re =\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (this.user.username.match(re)) {\r\n      this.loginService\r\n        .validatePatientCredsWithEmail(this.user.username, this.user.password)\r\n        .subscribe((res) => {\r\n          this.user1 = res;\r\n          console.log(this.user1 != null);\r\n          if (this.user1 != null) {\r\n            sessionStorage.setItem('patient', this.user1.SSN);\r\n            alert('Sucessful');\r\n            this.router.navigate(['../patient-dashboard'], {\r\n              relativeTo: this.route,\r\n            });\r\n          }\r\n        },\r\n\r\n          (error) => {\r\n            alert(error.error);\r\n          }\r\n        );\r\n    } else {\r\n      this.loginService\r\n        .validatePatientCredsWithUsername(\r\n          this.user.username,\r\n          this.user.password\r\n        )\r\n        .subscribe(\r\n          (res) => {\r\n            this.user1 = res;\r\n            console.log(this.user1 != null);\r\n            if (this.user1 != null) {\r\n              sessionStorage.setItem('patient', this.user1.SSN);\r\n              alert('Sucessful');\r\n              this.router.navigate(['../patient-dashboard'], {\r\n                relativeTo: this.route,\r\n              });\r\n            }\r\n          },\r\n          (error) => {\r\n            alert(error.error);\r\n          }\r\n        );\r\n    }\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"card \">\r\n    <div class=\"card-header\">\r\n      <img src='../../assets/project2.png' width=\"200\" height=\"200\">\r\n      <br>\r\n      <br>\r\n      Login as Patient\r\n    </div>\r\n    <div class=\"card-body\">\r\n      <h5 class=\"card-title\">Enter<br> Credentials:</h5>\r\n\r\n      <form [formGroup]=\"myForm\" novalidate>\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" id=\"username\" [(ngModel)]=\"user.username\" name =\"username\" [ngClass]=\"{ 'is-invalid': inboudClick && f.input.errors }\"\r\n          style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"text\" placeholder=\"Username or Email\"\r\n          formControlName=\"input\">\r\n          <div *ngIf=\"inboudClick && f.input.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.input.errors.required\">Username or Email is required</div>\r\n            <div *ngIf=\"f.input.errors.cannotContainSpace\">No space</div>\r\n        </div>\r\n        </div>\r\n        <br>\r\n        <br>\r\n        <div class=\"form-group\">\r\n          <input class=\"form-control\" id=\"password\" [(ngModel)]=\"user.password\" name =\"password\" [ngClass]=\"{ 'is-invalid': inboudClick && f.passwordValidator.errors}\"\r\n            style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"password\" placeholder=\"Password\" formControlName=\"passwordValidator\" >\r\n            <div *ngIf=\"inboudClick && f.passwordValidator.errors\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"f.passwordValidator.errors.required\">Password is required</div>\r\n              <div *ngIf=\"f.passwordValidator.errors.cannotContainSpace\">No space</div>\r\n          </div>\r\n        </div>\r\n        <br>\r\n        <br>\r\n        <button class=\"btn btn-dark btn-outline-light\" type=\"button\" (click)=\"validatePatientCreds()\">\r\n          <span class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n          Login\r\n        </button>\r\n\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n<br>\r\n<br>\r\n<br>","import { AbstractControl, ValidationErrors } from '@angular/forms';\r\n  \r\nexport class NoWhiteSpaceValidator {\r\n    static cannotContainSpace(control: AbstractControl) : ValidationErrors | null {\r\n        if((control.value as string).indexOf(' ') >= 0){\r\n            return {cannotContainSpace: true}\r\n        }\r\n  \r\n        return null;\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ChangeEmailComponent } from './change-email/change-email.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport {LoginPatientComponent} from './login-patient/login-patient.component';\r\nimport { LoginProviderComponent } from './login-provider/login-provider.component';\r\nimport { PatientDashboardComponent } from './patient-dashboard/patient-dashboard.component';\r\nimport { ProviderDashboardComponent } from './provider-dashboard/provider-dashboard.component';\r\nimport { QrCodeGeneratorReaderComponent } from './qr-code-generator-reader/qr-code-generator-reader.component';\r\nimport { RegisterPatientComponent } from './register-patient/register-patient.component';\r\nimport { UpdatePatientComponent } from './update-patient/update-patient.component';\r\n\r\nconst routes: Routes = [\r\n{ path: '', redirectTo: '/home', pathMatch: 'full' },\r\n{path: 'home', component:HomeComponent},\r\n{path: 'loginPatient', component:LoginPatientComponent},\r\n{path: 'loginProvider', component:LoginProviderComponent},\r\n{path: 'registerPatient', component:RegisterPatientComponent},\r\n{path: 'qr-generator-reader', component:QrCodeGeneratorReaderComponent},\r\n{path: 'patient-dashboard',component:PatientDashboardComponent},\r\n{path: 'provider-dashboard', component:ProviderDashboardComponent},\r\n{path: 'patientUpdate', component:UpdatePatientComponent},\r\n{path: 'changeUsername', component: ChangeEmailComponent}\r\n\r\n\r\n\r\n];\r\n\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { FormBuilder, FormGroup, Validators, FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\n\r\nimport {UpdatePatientService} from '../services/PatientService/update-patient.service';\r\nimport { AlertService } from '../services/AlertService/alert.service';\r\nimport {NoWhiteSpaceValidator} from '../Validators/no-whitespace';\r\nimport {DateValidator} from '../Validators/Date';\r\n\r\n@Component({\r\n  selector: 'app-update-patient',\r\n  templateUrl: './update-patient.component.html',\r\n  styleUrls: ['./update-patient.component.css']\r\n})\r\nexport class UpdatePatientComponent implements OnInit {\r\n  form: FormGroup;\r\n  loading = false;\r\n  submitted = false;\r\n  \r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private updatePatientService: UpdatePatientService,\r\n    private alertService: AlertService\r\n  ) { }\r\n\r\n  ngOnInit() {// used to  create the form to eventually post\r\n    this.form = this.formBuilder.group({\r\n      SSN: ['', [Validators.required, Validators.minLength(9), Validators.maxLength(9), NoWhiteSpaceValidator.cannotContainSpace]],\r\n      lot:['', [Validators.required, Validators.minLength(3), Validators.maxLength(200), NoWhiteSpaceValidator.cannotContainSpace]],\r\n      date: ['', [Validators.required, DateValidator.ptDate]],\r\n      VaccineType:['',Validators.required]\r\n  });\r\n  }\r\n\r\n  get f() { return this.form.controls; } //used to get form fields\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // reset alerts on submit\r\n    this.alertService.clear();\r\n    \r\n    // stop here if form is invalid\r\n    if (this.form.invalid) {\r\n        return;\r\n    }\r\n    console.log(this.form.value);\r\n    this.loading = true;\r\n    this.updatePatientService.update(this.form.value)\r\n\r\n        .pipe(first())\r\n        .subscribe({\r\n            next: () => {\r\n                this.alertService.success('Update successful', { keepAfterRouteChange: true });\r\n                this.router.navigate([''], { relativeTo: this.route });//This will reroute to the customer dashboard.\r\n            },\r\n            error: error => {\r\n                this.alertService.error(error);\r\n                this.loading = false;\r\n            }\r\n        });\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"card \">\r\n      <div class=\"card-header\">\r\n        <img src='../../assets/project2.png' width=\"200\" height=\"200\">\r\n      <br>\r\n      <br>\r\n        Register Patient\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <h5 class=\"card-title\">Enter<br> Credentials:</h5>\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"form-Group\">\r\n              <input style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"text\" placeholder=\"SSN\" formControlName=\"SSN\" class=\"form-control\"[ngClass]=\"{ 'is-invalid': submitted && f.SSN.errors }\">\r\n              <div *ngIf=\"submitted && f.SSN.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.SSN.errors.required\">SSN is required</div>\r\n                <div *ngIf=\"f.SSN.errors.minlength\">Must be exactly 9 digits</div>\r\n                <div *ngIf=\"f.SSN.errors.maxlength\">Must be exactly 9 digits</div>\r\n                <div *ngIf=\"f.SSN.errors.cannotContainSpace\">Cannot Contain Space</div>\r\n            </div>\r\n            </div>\r\n            <br>\r\n            <div class=\"form-Group\">\r\n                <label for=\"VaccineType\">Vaccine Type:</label>\r\n                <select name=\"VaccineType\"  formControlName=\"VaccineType\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.VaccineType.errors }\">\r\n                  <option value=\"Moderna\">Moderna</option>\r\n                  <option value=\"Pfizer\">Pfizer</option>\r\n                  <option value=\"Johnson&Johnson\">Johnson&Johnson</option>\r\n                </select>\r\n                <div *ngIf=\"submitted && f.VaccineType.errors\" class=\"invalid-feedback\">  \r\n                <div *ngIf=\"f.VaccineType.errors.required\">Vaccine Type is required</div>\r\n              </div> \r\n            </div>\r\n            <br>\r\n            <br>\r\n            <div class=\"form-Group\">\r\n                <input style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"text\" placeholder=\"Lot#\" formControlName=\"lot\" class=\"form-control\"[ngClass]=\"{ 'is-invalid': submitted && f.lot.errors }\">\r\n                <div *ngIf=\"submitted && f.lot.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f.lot.errors.required\">lot is required</div>\r\n                  <div *ngIf=\"f.lot.errors.minlength\">Number of numbers/characters must be greater than 3</div>\r\n                  <div *ngIf=\"f.lot.errors.maxlength\">Number of characters must be less than 200</div>\r\n                  <div *ngIf=\"f.lot.errors.cannotContainSpace\">Cannot Contain Space</div>\r\n              </div>\r\n              </div>\r\n            <br>\r\n            <div class=\"form-Group\">\r\n                Date of Vaccination:\r\n                <input style=\"align-content:center; margin: 0 auto; width:100%;\" type=\"text\" placeholder=\"dd/mm/yyyy\" formControlName=\"date\" class=\"form-control\"[ngClass]=\"{ 'is-invalid': submitted && f.date.errors }\">\r\n                <div *ngIf=\"submitted && f.date.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f.date.errors.required\">Date of Vaccination is required</div>\r\n                  <div *ngIf=\"f.date.errors.ptDate\">Please enter it as dd/mm/yyyy.</div>\r\n              </div>\r\n              </div>\r\n              <br>\r\n            <button [disabled]=\"loading\" class=\"btn btn-dark btn-outline-light\">\r\n              <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                      Update\r\n            </button>\r\n          </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n","export class PatientCreds{\r\n\r\n    username:string;\r\n    email:string;\r\n    password:string;\r\n    fullname:string;\r\n    SSN:string;\r\n}","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}